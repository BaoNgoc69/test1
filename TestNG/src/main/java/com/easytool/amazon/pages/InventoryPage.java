package com.easytool.amazon.pages;

import org.openqa.selenium.*;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.testng.Assert;

import java.util.List;

import static java.lang.Thread.sleep;

public class InventoryPage extends BasePage {

    By inventoryTabLocator = By.xpath("//ul[@class='tabs-container']//span[normalize-space()='Inventory']");
    By configLinkLocator = By.xpath("//a[normalize-space()='How to use Inventory tab?']");
    By btnClickAllToAmazon = By.xpath("//button[span[contains(text(), 'Send all to Amazon')]]");
    By btnClickDisableAllProduct = By.xpath("//button[contains(text(), 'Disable all products')]");
    By productNotFoundMessageLocator = By.xpath("//span[@class='not-found-sync-h' and contains(text(), 'Products not found')]");

    public InventoryPage(WebDriver driver, BaseTestHelper baseTestHelper) {
        super(driver, baseTestHelper);
        PageFactory.initElements(driver, this);
    }

    public boolean openInventoryTab() {
        try {
            switchToIframe();

            // ‚ö° D√πng JavaScript ƒë·ªÉ click tr√°nh b·ªã element kh√°c che
            WebElement inventoryTab = wait.until(ExpectedConditions.presenceOfElementLocated(inventoryTabLocator));
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", inventoryTab);
            System.out.println("‚úÖ ƒê√£ click v√†o tab 'Inventory' (b·∫±ng JS)");

            // ‚¨á Scroll t·ªõi link h∆∞·ªõng d·∫´n n·∫øu n√≥ n·∫±m ngo√†i v√πng nh√¨n th·∫•y
            WebElement configLink = wait.until(ExpectedConditions.presenceOfElementLocated(configLinkLocator));
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({behavior: 'auto', block: 'center'});", configLink);
            Thread.sleep(300); // ch·ªù scroll ho√†n t·∫•t

            // ‚úÖ Ki·ªÉm tra hi·ªÉn th·ªã
            Assert.assertTrue(configLink.isDisplayed(), "‚ùå Link 'How to use Inventory tab?' kh√¥ng hi·ªÉn th·ªã!");
            System.out.println("‚úÖ Link 'How to use Inventory tab?' ƒë√£ xu·∫•t hi·ªán!");

            baseTestHelper.takeScreenshot(driver, "ƒê√£ click v√†o tab Inventory");
            Thread.sleep(200);
            return true;

        } catch (Exception e) {
            Assert.fail("‚ö†Ô∏è L·ªói khi m·ªü tab Inventory: " + e.getMessage());
            return false;
        } finally {
            switchToDefaultContent();
        }
    }





    public void clickSendAllToAmazon() {
        try {
            switchToIframe();

            WebElement sendAllButton = wait.until(ExpectedConditions.elementToBeClickable(btnClickAllToAmazon));
            sendAllButton.click();
            baseTestHelper.takeScreenshot(driver, "btnInventory");

            Assert.assertTrue(true, "‚úÖ ƒê√£ click v√†o n√∫t 'Send all to Amazon'");
        } catch (Exception e) {
            Assert.fail("‚ö†Ô∏è L·ªói khi click v√†o 'Send all to Amazon': " + e.getMessage());
        } finally {
            switchToDefaultContent();
        }
    }

    public void verifyUIOnNoProductsFound() {
        System.out.println("üß™ ƒêang ki·ªÉm tra UI khi kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c hi·ªÉn th·ªã...");
        try {
            switchToIframe(); // ƒê·∫£m b·∫£o b·∫°n ƒë√£ chuy·ªÉn v√†o ƒë√∫ng iframe

            // 1. Ki·ªÉm tra th√¥ng b√°o "Products not found" hi·ªÉn th·ªã
            try {
                // S·ª≠ d·ª•ng bi·∫øn 'wait' t·ª´ BasePage ho·∫∑c ƒë∆∞·ª£c kh·ªüi t·∫°o trong constructor
                WebElement notFoundMessage = wait.until(ExpectedConditions.visibilityOfElementLocated(productNotFoundMessageLocator));
                Assert.assertTrue(notFoundMessage.isDisplayed(), "‚ùå Th√¥ng b√°o 'Products not found' KH√îNG hi·ªÉn th·ªã.");
                System.out.println("‚úÖ Th√¥ng b√°o 'Products not found' ƒë√£ hi·ªÉn th·ªã.");
            } catch (TimeoutException e) {
                baseTestHelper.takeScreenshot(driver,"Loi_KhongThay_ProductNotFound");
                Assert.fail("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng b√°o 'Products not found' trong th·ªùi gian ch·ªù.");
            }

            // 2. Ki·ªÉm tra n√∫t "Send all to Amazon" KH√îNG t·ªìn t·∫°i/hi·ªÉn th·ªã
            List<WebElement> sendAllButtons = driver.findElements(btnClickAllToAmazon);
            Assert.assertTrue(sendAllButtons.isEmpty(), "‚ùå N√∫t 'Send all to Amazon' V·∫™N t·ªìn t·∫°i khi kh√¥ng c√≥ s·∫£n ph·∫©m.");
            System.out.println("‚úÖ N√∫t 'Send all to Amazon' kh√¥ng t·ªìn t·∫°i/hi·ªÉn th·ªã.");

            // 3. (T√πy ch·ªçn) Ki·ªÉm tra n√∫t "Disable all products" c≈©ng KH√îNG t·ªìn t·∫°i/hi·ªÉn th·ªã
            List<WebElement> disableAllButtons = driver.findElements(btnClickDisableAllProduct);
            Assert.assertTrue(disableAllButtons.isEmpty(), "‚ùå N√∫t 'Disable all products' V·∫™N t·ªìn t·∫°i khi kh√¥ng c√≥ s·∫£n ph·∫©m.");
            System.out.println("‚úÖ N√∫t 'Disable all products' kh√¥ng t·ªìn t·∫°i/hi·ªÉn th·ªã.");

            // Ch·ª•p ·∫£nh m√†n h√¨nh ƒë·ªÉ x√°c nh·∫≠n tr·∫°ng th√°i UI
            baseTestHelper.takeScreenshot(driver, "XacNhan_UI_KhongCoSanPham");

        } catch (Exception e) {
            // B·∫Øt c√°c l·ªói kh√¥ng mong mu·ªën kh√°c
            baseTestHelper.takeScreenshot(driver,"Loi_KiemTra_UI_KhongCoSanPham");
            Assert.fail("‚ö†Ô∏è L·ªói x·∫£y ra trong qu√° tr√¨nh ki·ªÉm tra UI khi kh√¥ng c√≥ s·∫£n ph·∫©m: " + e.getMessage());
        } finally {
            switchToDefaultContent(); // Lu√¥n ƒë·∫£m b·∫£o chuy·ªÉn v·ªÅ default content
        }
    }


    // Kiem tra xem c√≥ san pham n√†o hay ko
    public boolean isProductAvailable() {
        try {
            switchToIframe();  // Quan tr·ªçng: ph·∫£i chuy·ªÉn v√†o iframe tr∆∞·ªõc khi ki·ªÉm tra

            // N·∫øu KH√îNG t√¨m th·∫•y th√¥ng b√°o "Products not found" th√¨ nghƒ©a l√† C√ì s·∫£n ph·∫©m
            boolean isNotFoundVisible = !driver.findElements(productNotFoundMessageLocator).isEmpty();

            return !isNotFoundVisible;  // C√≥ s·∫£n ph·∫©m n·∫øu KH√îNG c√≥ th√¥ng b√°o
        } finally {
            switchToDefaultContent();  // Lu√¥n chuy·ªÉn v·ªÅ default sau khi ki·ªÉm tra
        }
    }

//    public void clickDisableAllProducts() {
//        try {
//            switchToIframe();
//
//            WebElement disableAllBtn = wait.until(ExpectedConditions.elementToBeClickable(btnClickDisableAllProduct));
//            disableAllBtn.click();
//            baseTestHelper.takeScreenshot(driver, "Disable all product");
//
//            Assert.assertTrue(true, "‚úÖ ƒê√£ click v√†o n√∫t 'Disable all products'");
//        } catch (Exception e) {
//            Assert.fail("‚ö†Ô∏è L·ªói khi click 'Disable all products': " + e.getMessage());
//        } finally {
//            switchToDefaultContent();
//        }
//    }

}
